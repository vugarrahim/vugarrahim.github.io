"""
Django settings for port_app project.

Generated by 'django-admin startproject' using Django 1.9.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os

location = lambda x: os.path.abspath(os.path.join(os.path.dirname(__file__), "..", x))
location_next2_app = lambda x: os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..", x))
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

LOCALE_PATHS = (os.path.join(BASE_DIR, "locale"),)
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '23-!bvslrxej$5*$q_8%88)s9qw=#c*449o43yf53vufifi=i='

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
PROD = not DEBUG

ALLOWED_HOSTS = ['booking.portofbaku.com'] if PROD else []


# Application definition

INSTALLED_APPS = [
    'modeltranslation',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.flatpages',
    'auditlog',
    'djcelery',
    'widget_tweaks',
    'accounts',
    'booking',
    'booking_payment',
]

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    # i18n
    'django.middleware.locale.LocaleMiddleware',
    # --
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',
    'auditlog.middleware.AuditlogMiddleware',

]

ROOT_URLCONF = 'port_app.urls'
SITE_ID = 1

LOGIN_REDIRECT_URL = '/'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, "templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # i18n
                'django.core.context_processors.i18n',
            ],
        },
    },
]

WSGI_APPLICATION = 'port_app.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'port_db_name',
        'USER': 'port_db_user',
        'PASSWORD': 'B6E1C5F0554B4A7F0BC8DE1FBA1C7C510195EF560593B22DD28D6598D942EA9B',
        'HOST': 'localhost',
        'PORT': '',  # Set to empty string for default.
    }
}

# GOLDEN PAY
# --------------------------------------------------------
MERCHANTNAME = 'portofbaku'
AUTH_KEY = "ad1947d345624106b67a35ebd4f6ed76"
GET_PAYMENT_KEY_URL = "https://rest.goldenpay.az/web/service/merchant/getPaymentKey"
PAYMENT_URL = "https://rest.goldenpay.az/web/paypage"
GET_PAYMENT_RESULT_URL = "https://rest.goldenpay.az/web/service/merchant/getPaymentResult"

# --------------------------------------------------------

# Customize user model
AUTH_USER_MODEL = "accounts.MyUser"


# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/
# i18n
# http://stackoverflow.com/a/25152013/968751
# http://stackoverflow.com/a/26520044/968751
# ./manage.py makemessages -l az
# ./manage.py compilemessages
LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'locale/'),
)

gettext = lambda s: s
LANGUAGES = (
    ('az', gettext('Azerbaijan')),
    ('en', gettext('English')),
    ('ru', gettext('Russia'))
)

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = location("static")
# Media files
MEDIA_ROOT = location("media")
MEDIA_URL = "/media/"


HOST = 'http://portofbaku.dev' if DEBUG else 'http://booking.portofbaku.com'
#------------------------------------------------------------------
# Email settings
if PROD:
    EMAIL_HOST = 'smtp.office365.com'
    EMAIL_HOST_USER = 'booking@portofbaku.com'
    EMAIL_HOST_PASSWORD = 'Ld8c.9@vB!,(L'
    EMAIL_PORT = 587
    EMAIL_USE_TLS = True
    DEFAULT_FROM_EMAIL = 'PortOfBaku.com <%s>' % EMAIL_HOST_USER
else:
    EMAIL_HOST = 'smtp.gmail.com'
    EMAIL_HOST_USER = 'testemaillabrin@gmail.com'
    EMAIL_HOST_PASSWORD = 'labrinemail'
    EMAIL_PORT = 587
    EMAIL_USE_TLS = True
    DEFAULT_FROM_EMAIL = EMAIL_HOST_USER


#------------------------------------------------------------------
# System params
BOOKING_DATE_RANGE_GAP = 3
BOOKING_CARGO_LIMIT = 6
BOOKING_PASSENGER_LIMIT = 10


    
# A sample logging configuration. The only tangible logging
# performed by this configuration is to send an email to
# the site admins on every HTTP 500 error.
# See http://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
LOG_ROOT = location_next2_app('logs')
LOG_LEVEL = 'ERROR' if PROD else 'DEBUG'
LOGGING = {
    'version': 1,
    'disable_existing_loggers': not DEBUG,  # True,
    'formatters': {
        'standard': {
            'format': '%(asctime)s [%(levelname)s] %(name)s:=> %(message)s',
        },
        'focused': {
            'format': '\n----------------------\n%(asctime)s [%(levelname)s] %(name)s:=> %(message)s \n----------------------',
        },
    },
    'handlers': {
        'my_custom_debug': {
            'level': LOG_LEVEL,
            'class': 'logging.FileHandler',
            'filename': '%s/mylog.log' % LOG_ROOT,
            'formatter': 'focused',
        },
        'request_handler': {
            'level': LOG_LEVEL,
            'class': 'logging.FileHandler',
            'filename': '%s/django_requests.log' % LOG_ROOT,
            'formatter': 'standard',
        },
    },
    'loggers': {
        '': {
            'handlers': ['my_custom_debug'],
            'level': LOG_LEVEL,
            'propagate': True,
        },
        'django.request': {
            'handlers': ['request_handler'],
            'level': LOG_LEVEL,
            'propagate': True,
        },
    },
}
